// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movie.Common.Contexts;

#nullable disable

namespace Movie.Common.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240129162127_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Movie.Common.Models.Genre.GenreModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Movie.Common.Models.Movie.MovieModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("director");

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("genre_id");

                    b.Property<string>("PlotSummary")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("plot_summary");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("poster_url");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("GenreId");

                    b.ToTable("tb_movie", (string)null);
                });

            modelBuilder.Entity("Movie.Common.Models.User.UserModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Movie.Common.Models.UserReview.UserReviewModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_date");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("movie_id");

                    b.Property<double>("Rating")
                        .HasColumnType("double")
                        .HasColumnName("rating");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("review_date");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("review_text");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReview");
                });

            modelBuilder.Entity("Movie.Common.Models.Movie.MovieModel", b =>
                {
                    b.HasOne("Movie.Common.Models.Genre.GenreModel", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Movie.Common.Models.UserReview.UserReviewModel", b =>
                {
                    b.HasOne("Movie.Common.Models.Movie.MovieModel", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.Common.Models.User.UserModel", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movie.Common.Models.Genre.GenreModel", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Movie.Common.Models.Movie.MovieModel", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Movie.Common.Models.User.UserModel", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
